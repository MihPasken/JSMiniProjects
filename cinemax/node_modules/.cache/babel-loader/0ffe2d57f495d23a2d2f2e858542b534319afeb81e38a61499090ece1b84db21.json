{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// API key for accessing the movie API\nconst API_KEY = \"4245b374-41f1-4962-ae9f-4e6f3d9044cc\";\n\n// URL of the movie API\nconst MOVIE_API_SRC = \"https://kinopoiskapiunofficial.tech/api/v2.2/films?order=RATING&type=ALL&ratingFrom=0&ratingTo=10&yearFrom=1000&yearTo=3000&page=2\";\n\n// Function to fetch movies from the API\nasync function getMovies(url) {\n  try {\n    const resp = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-API-KEY\": API_KEY\n      }\n    });\n\n    // Parse the response data\n    const resp_data = await resp.json();\n    return resp_data;\n  } catch (error) {\n    console.error(\"Error fetching and parsing data:\", error);\n  }\n}\n;\n\n// Fetch movies and store the result\nconst APImovies = await getMovies(MOVIE_API_SRC).then(result => result);\n\n// Extract the list of movies from the fetched data\nconst APImoviesList = APImovies.items;\n\n// Define the initial state for the Redux slice\nconst initialState = {\n  movies: APImoviesList.map(movie => ({\n    movieImg: movie.posterUrl,\n    movieInfo: {\n      movieTitle: movie.nameRu,\n      movieCategory: movie.genres[0].genre,\n      movieRating: movie.ratingImdb\n    }\n  }))\n  // Filter out movies that belong to the \"музыка\" or \"фэнтези\" categories\n  .filter(item => item.movieInfo.movieCategory !== \"музыка\" && item.movieInfo.movieCategory !== \"фэнтези\")\n};\n\n// Create a Redux slice for managing cinema-related state\nconst CinemaSlicer = createSlice({\n  name: \"CinemaSlicer\",\n  initialState,\n  reducers: {\n    // Reducer to retain the current state of movies\n    nulling(state, action) {\n      state.movies = state.movies; // The spare function\n    }\n  }\n});\n\n// Export the reducer function from the slice\nexport default CinemaSlicer.reducer;","map":{"version":3,"names":["createSlice","API_KEY","MOVIE_API_SRC","getMovies","url","resp","fetch","headers","resp_data","json","error","console","APImovies","then","result","APImoviesList","items","initialState","movies","map","movie","movieImg","posterUrl","movieInfo","movieTitle","nameRu","movieCategory","genres","genre","movieRating","ratingImdb","filter","item","CinemaSlicer","name","reducers","nulling","state","action","reducer"],"sources":["C:/Users/Vikto/Desktop/MyWorks/JS/JSMiniProjects/cinemax/src/Redux/CinemaSlicer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// API key for accessing the movie API\r\nconst API_KEY = \"4245b374-41f1-4962-ae9f-4e6f3d9044cc\";\r\n\r\n// URL of the movie API\r\nconst MOVIE_API_SRC = \"https://kinopoiskapiunofficial.tech/api/v2.2/films?order=RATING&type=ALL&ratingFrom=0&ratingTo=10&yearFrom=1000&yearTo=3000&page=2\";\r\n\r\n// Function to fetch movies from the API\r\nasync function getMovies(url) {\r\n    try {\r\n        const resp = await fetch(url, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-API-KEY\": API_KEY,\r\n            }\r\n        });\r\n\r\n        // Parse the response data\r\n        const resp_data = await resp.json();\r\n        return resp_data;\r\n\r\n    } catch (error) {\r\n        console.error(\"Error fetching and parsing data:\", error);\r\n    }\r\n};\r\n\r\n// Fetch movies and store the result\r\nconst APImovies = await getMovies(MOVIE_API_SRC).then(result => result);\r\n\r\n// Extract the list of movies from the fetched data\r\nconst APImoviesList = APImovies.items;\r\n\r\n// Define the initial state for the Redux slice\r\nconst initialState = {\r\n    movies: APImoviesList.map(movie => (\r\n        {\r\n            movieImg: movie.posterUrl,\r\n            movieInfo: {\r\n                movieTitle: movie.nameRu,\r\n                movieCategory: movie.genres[0].genre,\r\n                movieRating: movie.ratingImdb,\r\n            }\r\n        }\r\n    ))\r\n    // Filter out movies that belong to the \"музыка\" or \"фэнтези\" categories\r\n    .filter(item => item.movieInfo.movieCategory !== \"музыка\" && item.movieInfo.movieCategory !== \"фэнтези\"),\r\n};\r\n\r\n// Create a Redux slice for managing cinema-related state\r\nconst CinemaSlicer = createSlice({\r\n    name: \"CinemaSlicer\",\r\n    initialState,\r\n    reducers: {\r\n        // Reducer to retain the current state of movies\r\n        nulling(state, action) {\r\n            state.movies = state.movies; // The spare function\r\n        }\r\n    }\r\n});\r\n\r\n// Export the reducer function from the slice\r\nexport default CinemaSlicer.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,OAAO,GAAG,sCAAsC;;AAEtD;AACA,MAAMC,aAAa,GAAG,oIAAoI;;AAE1J;AACA,eAAeC,SAASA,CAACC,GAAG,EAAE;EAC1B,IAAI;IACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC1BG,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAEN;MACjB;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMO,SAAS,GAAG,MAAMH,IAAI,CAACI,IAAI,CAAC,CAAC;IACnC,OAAOD,SAAS;EAEpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;EAC5D;AACJ;AAAC;;AAED;AACA,MAAME,SAAS,GAAG,MAAMT,SAAS,CAACD,aAAa,CAAC,CAACW,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAC;;AAEvE;AACA,MAAMC,aAAa,GAAGH,SAAS,CAACI,KAAK;;AAErC;AACA,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAEH,aAAa,CAACI,GAAG,CAACC,KAAK,KAC3B;IACIC,QAAQ,EAAED,KAAK,CAACE,SAAS;IACzBC,SAAS,EAAE;MACPC,UAAU,EAAEJ,KAAK,CAACK,MAAM;MACxBC,aAAa,EAAEN,KAAK,CAACO,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK;MACpCC,WAAW,EAAET,KAAK,CAACU;IACvB;EACJ,CAAC,CACJ;EACD;EAAA,CACCC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACT,SAAS,CAACG,aAAa,KAAK,QAAQ,IAAIM,IAAI,CAACT,SAAS,CAACG,aAAa,KAAK,SAAS;AAC3G,CAAC;;AAED;AACA,MAAMO,YAAY,GAAGjC,WAAW,CAAC;EAC7BkC,IAAI,EAAE,cAAc;EACpBjB,YAAY;EACZkB,QAAQ,EAAE;IACN;IACAC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACnBD,KAAK,CAACnB,MAAM,GAAGmB,KAAK,CAACnB,MAAM,CAAC,CAAC;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,eAAee,YAAY,CAACM,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}